/**
 * @fileoverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and a public-read, owner-write model for projects.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, accessible only to the owning user.
 * - Projects are stored under `/projects/{projectId}`, publicly readable but writable only by the project creator.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Projects are publicly readable, allowing for discovery.
 * - Project creation, updates, and deletion are restricted to the project's owner, determined by the `userId` field in the project document.
 * - User listing is disallowed to protect user privacy.
 *
 * Denormalization for Authorization:
 * The `Project` entity requires a `userId` field to denote ownership, enabling secure write rules without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data, ensuring only the owning user can access it.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates a profile with matching `id` field.
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their own profile.
     * @deny (create) User with ID 'user456' attempts to create a profile for 'user123'.
     * @deny (get, update, delete) User with ID 'user456' attempts to read/update/delete profile 'user123'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages project data, allowing public read access but restricting writes to the project owner.
     * @path /projects/{projectId}
     * @allow (get, list) Any user can read or list projects.
     * @allow (create) User with ID 'user123' creates a project with `userId: 'user123'`.
     * @allow (update, delete) User with ID 'user123' updates/deletes project with `userId: 'user123'`.
     * @deny (create) User with ID 'user456' attempts to create a project with `userId: 'user123'`.
     * @deny (update, delete) User with ID 'user456' attempts to update/delete project with `userId: 'user123'`.
     * @principle Allows public read access while enforcing document ownership for writes.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && request.auth.uid == userId && resource != null;
    }
  }
}