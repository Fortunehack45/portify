/**
 * @fileoverview Firestore Security Rules for Portfolio App.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * allowing users to manage their own profiles and projects. Projects are stored
 * in a top-level collection. Usernames are stored in a public top-level collection,
 * but are read-only and can only be created/deleted by authorized function.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only by the user.
 * - /projects/{projectId}: Stores project data, owned by a user.
 * - /usernames/{username}: Stores username-to-userId mappings, read-only for clients.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can create, update, and delete their own projects.
 * - Listing of users is disallowed for privacy reasons.
 * - Username mappings are publicly readable but not writable by clients.
 * - The rules do NOT perform deep data validation in this prototype phase.
 *
 * Denormalization for Authorization:
 * The 'Project' entity requires the 'userId' to be present, allowing for quick
 * ownership checks without needing to `get()` the user profile.
 *
 * Structural Segregation:
 * User profiles and projects are stored in separate collections to clearly
 * delineate ownership and access control. User profiles are private; projects are public.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, list) User with ID 'user123' can read their own profile.
     * @allow (create, update, delete) User with ID 'user123' can modify their own profile.
     * @deny (get, list) User with ID 'user456' cannot read user 'user123's profile.
     * @deny (create, update, delete) User with ID 'user456' cannot modify user 'user123's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // isOwner: Checks if the current user is the owner of the resource.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // isSignedIn: Checks if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to project documents.
     * @path /projects/{projectId}
     * @allow (get, list) Any user can read any project.
     * @allow (create) User with ID 'user123' can create a project with userId 'user123'.
     * @allow (update, delete) User with ID 'user123' can modify their own project.
     * @deny (create) User with ID 'user456' cannot create a project with userId 'user123'.
     * @deny (update, delete) User with ID 'user456' cannot modify project 'project123' if they are not the owner.
     * @principle Allows public reads, enforces ownership for writes.
     */
    match /projects/{projectId} {
      // isProjectOwner: Checks if the current user owns the project.
      function isProjectOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isProjectOwner(request.resource.data.userId);
      allow update: if isProjectOwner(resource.data.userId) && resource != null;
      allow delete: if isProjectOwner(resource.data.userId) && resource != null;
    }

    /**
     * @description Controls access to username documents.
     * @path /usernames/{username}
     * @allow (get, list) Any user can read any username.
     * @deny (create, update, delete) No client can create, update, or delete usernames.
     * @principle Allows public reads, restricts writes to server-side functions.
     */
    match /usernames/{username} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}