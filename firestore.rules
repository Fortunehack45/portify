/**
 * @fileoverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles, portfolios and projects,
 * while also allowing public read access to project and portfolio data.
 * Usernames and ProjectNames are publicly readable but only created/modified by the system.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.  Only the owning user can read or write their profile.
 * - /portfolios/{portfolioId}: Stores portfolio data. Publicly readable, but only the owner can modify.
 * - /projects/{projectId}: Stores project data. Publicly readable, but only the owner can modify.
 * - /usernames/{username}: Maps usernames to user IDs. Publicly readable, system-managed.
 * - /projectNames/{projectName}: Maps project name slugs to project IDs. Publicly readable, system-managed.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Public read access is granted to the projects and portfolios collections to enable discovery.
 * - The 'usernames' collection is read-only for users to lookup user id's
 * - The 'projectNames' collection is read-only for users to lookup project id's
 *
 * Denormalization for Authorization:
 * - Portfolios and Projects contain a `userId` field to easily identify the owner, enabling the `isOwner()` function.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the existing resource.
     *  Also verifies that the document exists to prevent accidental deletion of non-existent documents.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces strong ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - User 'abc' can create their profile if request.auth.uid == 'abc' and request.resource.data.id == 'abc'.
     * @allow (get, update, delete) - User 'abc' can read/update/delete their profile at /users/abc if request.auth.uid == 'abc'.
     * @deny (create) - User 'def' cannot create a profile as user 'abc' at /users/abc.
     * @deny (update) - User 'def' cannot update user 'abc's profile at /users/abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user portfolios with public read access and owner-only writes.
     * @path /portfolios/{portfolioId}
     * @allow (get, list) - Any user can read a portfolio.
     * @allow (create) - User 'abc' can create a portfolio if request.auth.uid == 'abc' and request.resource.data.userId == 'abc'.
     * @allow (update, delete) - User 'abc' can update/delete portfolio 'xyz' if they own it and it exists.
     * @deny (create) - User 'def' cannot create a portfolio with userId 'abc'.
     * @deny (update) - User 'def' cannot update portfolio 'xyz' owned by 'abc'.
     * @principle Public read access with owner-only writes, enforced via the 'userId' field.
     */
    match /portfolios/{portfolioId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Manages projects with public read access and owner-only writes.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user can read a project.
     * @allow (create) - User 'abc' can create a project if request.auth.uid == 'abc' and request.resource.data.userId == 'abc'.
     * @allow (update, delete) - User 'abc' can update/delete project 'xyz' if they own it and it exists.
     * @deny (create) - User 'def' cannot create a project with userId 'abc'.
     * @deny (update) - User 'def' cannot update project 'xyz' owned by 'abc'.
     * @principle Public read access with owner-only writes, enforced via the 'userId' field.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Provides public lookup of usernames but restricts creation/modification to the system.
     * @path /usernames/{username}
     * @allow (get) - Any user can read a username mapping.
     * @deny (create, update, delete) - No user can create/update/delete username mappings via client-side rules.
     * @principle Public read, system-managed writes (backend functions).
     */
    match /usernames/{username} {
      allow get: if true;
      allow list: if false;
      allow create, update, delete: if false;
    }

    /**
     * @description Provides public lookup of project names but restricts creation/modification to the system.
     * @path /projectNames/{projectName}
     * @allow (get) - Any user can read a project name mapping.
     * @deny (create, update, delete) - No user can create/update/delete project name mappings via client-side rules.
     * @principle Public read, system-managed writes (backend functions).
     */
    match /projectNames/{projectName} {
      allow get: if true;
      allow list: if false;
      allow create, update, delete: if false;
    }
  }
}