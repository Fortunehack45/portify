/**
 * @fileoverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, portfolios and projects.
 * Public read access is granted to projects and portfolios to facilitate discovery, but writes are restricted to owners.
 * User profiles and usernames are private and only accessible to the owning user, respectively.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information; write access is limited to the owning user.
 * - /portfolios/{portfolioId}: Stores portfolio data; publicly readable, write access is limited to the owning user.
 * - /projects/{projectId}: Stores project information; publicly readable, write access limited to owner.
 * - /usernames/{username}: Maps usernames to user IDs; backend-only writes to prevent conflicts.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Portfolios are publicly readable to allow for discovery, but only the owner can modify them.
 * - Projects are publicly readable to allow for discovery, but only the owner can modify them.
 * - Username mappings are publicly readable but only writable via backend to prevent spoofing and race conditions.
 * - Listing of users and usernames is blocked to prevent enumeration attacks.
 *
 * Denormalization for Authorization:
 * - Portfolio and Project entities include a 'userId' field to enable efficient ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the 'id' field matches their auth.uid.
     * @allow (get) - Authenticated user can read their own profile.
     * @allow (update) - Authenticated user can update their own profile, ensuring the 'id' field remains unchanged.
     * @allow (delete) - Authenticated user can delete their own profile.
     * @deny (list) - Prevents listing all users to avoid enumeration.
     * @principle Enforces strict document ownership for user profiles.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Controls access to portfolio documents.
     * @path /portfolios/{portfolioId}
     * @allow (get) - Anyone can read portfolio information.
     * @allow (list) - Anyone can list portfolios for discovery.
     * @allow (create) - Authenticated user can create a portfolio if the 'userId' field matches their auth.uid.
     * @allow (update) - Authenticated user can update their portfolio if they own it.
     * @allow (delete) - Authenticated user can delete their portfolio if they own it.
     * @principle Public read access with owner-only writes, enforcing document ownership.
     */
    match /portfolios/{portfolioId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to project documents.
     * @path /projects/{projectId}
     * @allow (get) - Anyone can read project information.
     * @allow (list) - Anyone can list projects for discovery.
     * @allow (create) - Authenticated user can create a project if the 'userId' field matches their auth.uid.
     * @allow (update) - Authenticated user can update their project if they own it.
     * @allow (delete) - Authenticated user can delete their project if they own it.
     * @principle Public read access with owner-only writes, enforcing document ownership.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to username mapping documents.
     * @path /usernames/{username}
     * @allow (get) - Anyone can read username mappings for profile lookups.
     * @deny (list) - Prevents listing all usernames to avoid enumeration.
     * @deny (create) - Prevents client-side creation of usernames.
     * @deny (update) - Prevents client-side updating of usernames.
     * @deny (delete) - Prevents client-side deletion of usernames.
     * @principle Backend-controlled writes to ensure data integrity and prevent spoofing.
     */
    match /usernames/{username} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}