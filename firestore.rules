/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and their associated data.
 * All data is nested under top-level collections: `/users/{userId}`, `/portfolios/{portfolioId}`, `/projects/{projectId}`, `/usernames/{username}`, `/projectNames/{projectName}`.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Usernames are publicly readable to facilitate profile lookups but are owner-writable.
 * - Project names are publicly readable to facilitate project lookups but are owner-writable.
 * - Listing of users is disallowed for privacy.
 * - Listing of portfolios is disallowed.
 * - Public read access for projects to allow public consumption of content. Owner-only writes to ensure authors retain control.
 * - Users can delete any portfolio.
 * - Users can name portfolio any name other users have name their own.
 *
 * Denormalization for Authorization:
 * - Ownership is enforced by requiring the `userId` field in the document to match the authenticated user's UID.
 *
 * Structural Segregation:
 * - Private user data is stored under `/users/{userId}`.
 * - Public project data is stored under `/projects/{projectId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles. Users can only read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile if request.auth.uid == 'user_abc' and request.resource.data.id == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete their profile if request.auth.uid == 'user_abc'.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile for user 'user_abc' (mismatched UID).
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot get, update, and delete the profile for user 'user_abc' (mismatched UID).
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages access to Portfolio documents.
     * @path /portfolios/{portfolioId}
     * @allow (create) - User with UID 'user_abc' can create a portfolio.
     * @allow (get) - User with UID 'user_abc' can get a portfolio.
     * @allow (delete) - User with UID 'user_abc' can delete any portfolio.
     * @deny (update) - User with UID 'user_xyz' cannot update a portfolio they don't own.
     * @deny (list) - Listing portfolios is not allowed.
     * @principle Portfolio ownership for writes, no listing.
     */
    match /portfolios/{portfolioId} {
      function isPortfolioOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isPortfolioOwner(resource.data.userId) && resource.data.userId == request.auth.uid && resource != null;
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access to Project documents.  Public read, owner writes.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user (signed in or not) can read any project.
     * @allow (create) - User with UID 'user_abc' can create a project if request.resource.data.userId == 'user_abc'.
     * @allow (update, delete) - User with UID 'user_abc' can update/delete a project if resource.data.userId == 'user_abc'.
     * @deny (create) - User with UID 'user_xyz' cannot create a project for user 'user_abc' (mismatched userId).
     * @deny (update, delete) - User with UID 'user_xyz' cannot update/delete a project owned by user 'user_abc' (mismatched userId).
     * @principle Public read access with owner-only writes.
     */
    match /projects/{projectId} {
      function isProjectOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingProjectOwner(userId) {
          return isProjectOwner(userId) && resource != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingProjectOwner(resource.data.userId) && resource.data.userId == request.auth.uid;
      allow delete: if isExistingProjectOwner(resource.data.userId) && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Manages access to Username documents.  Public read, owner writes.
     * @path /usernames/{username}
     * @allow (get) - Any user can read any username mapping.
     * @allow (create, update, delete) - Only the user who owns the username can modify it.
     * @deny (list) - Listing usernames is not allowed.
     * @principle Public read access with owner-only writes.
     */
    match /usernames/{username} {
      function isUsernameOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if true;
      allow list: if false;
      allow create: if isUsernameOwner(request.resource.data.userId);
      allow update: if isUsernameOwner(resource.data.userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isUsernameOwner(resource.data.userId);
    }

      /**
       * @description Manages access to ProjectName documents. Public read, owner writes.
       * @path /projectNames/{projectName}
       * @allow (get) - Any user can read any project name mapping.
       * @allow (create, update, delete) - Only the user who owns the project name can modify it.
       * @deny (list) - Listing project names is not allowed.
       */
      match /projectNames/{projectName} {
        function isProjectNameOwner(userId) {
          return request.auth != null && request.auth.uid == userId;
        }
        allow get: if true;
        allow list: if false;
        allow create: if isProjectNameOwner(request.resource.data.userId);
        allow update: if isProjectNameOwner(resource.data.userId);
        allow delete: if isProjectNameOwner(resource.data.userId);
      }
  }
}