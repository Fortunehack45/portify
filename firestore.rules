/**
 * @fileoverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and their associated data (projects and portfolios).
 * Public read access is granted to projects and usernames to enable discovery and profile lookups, but modifications are restricted to owners.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the owning user.
 * - /projects/{projectId}: Stores project data, publicly readable but writable only by the owner.
 * - /portfolios/{portfolioId}: Stores portfolio data, publicly readable but writable only by the owner.
 * - /usernames/{username}: Maps usernames to user IDs, publicly readable, writeable only on creation, and only if the userId matches the authenticated user's ID.
 * - /projectNames/{projectName}: Maps projectNames to projectIds and userIds, writeable only on creation, and only if the userId matches the authenticated user's ID.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - Public read access is granted for Projects and Usernames.
 *
 * Denormalization for Authorization:
 * - Projects and Portfolios both include a `userId` field to simplify ownership checks. This avoids costly `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that the `userId` field in the request data matches the authenticated user's ID on document creation.
     */
    function isValidOwnerIdOnCreate(userId) {
        return request.resource.data.userId == userId;
    }

    /**
     * @description Enforces immutability of the `userId` field on document updates.
     */
    function isUserIdImmutable(userId) {
        return request.resource.data.userId == resource.data.userId;
    }

    /**
     * @description User profiles are private and only accessible to the owning user.
     * @path /users/{userId}
     * @allow (get) Authenticated user with matching {userId} can read their profile.
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (update) Authenticated user with matching {userId} can update their profile.
     * @allow (delete) Authenticated user with matching {userId} can delete their profile.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @deny (create) Authenticated user cannot create a profile with a mismatched userId.
     * @deny (update) Authenticated user cannot update another user's profile.
     * @deny (delete) Authenticated user cannot delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is disabled for privacy.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Projects are publicly readable, but only the owner can create, update, or delete them.
     * @path /projects/{projectId}
     * @allow (get) Any user can read project details.
     * @allow (create) Authenticated user can create a project if the userId field matches their auth.uid.
     * @allow (update) Authenticated user with matching userId can update the project.
     * @allow (delete) Authenticated user with matching userId can delete the project.
     * @deny (create) Authenticated user cannot create a project with a mismatched userId.
     * @deny (update) Authenticated user cannot update a project they don't own.
     * @deny (delete) Authenticated user cannot delete a project they don't own.
     * @principle Public read access with owner-only writes.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isValidOwnerIdOnCreate(request.auth.uid);
      allow update: if isExistingOwner(request.resource.data.userId) && isUserIdImmutable(request.auth.uid);
      allow delete: if isExistingOwner(request.resource.data.userId);
    }

     /**
      * @description Portfolios are publicly readable, but only the owner can create, update, or delete them.
      * @path /portfolios/{portfolioId}
      * @allow (get) Any user can read portfolio details.
      * @allow (create) Authenticated user can create a portfolio if the userId field matches their auth.uid.
      * @allow (update) Authenticated user with matching userId can update the portfolio.
      * @allow (delete) Authenticated user with matching userId can delete the portfolio.
      * @deny (create) Authenticated user cannot create a portfolio with a mismatched userId.
      * @deny (update) Authenticated user cannot update a portfolio they don't own.
      * @deny (delete) Authenticated user cannot delete a portfolio they don't own.
      * @principle Public read access with owner-only writes.
      */
    match /portfolios/{portfolioId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && isValidOwnerIdOnCreate(request.auth.uid);
        allow update: if isExistingOwner(request.resource.data.userId) && isUserIdImmutable(request.auth.uid);
        allow delete: if isExistingOwner(request.resource.data.userId);
    }

    /**
     * @description Username mappings are publicly readable to allow profile lookups by username.
     *              Only the user can create a username mapping, and only if the userId matches their auth.uid.
     *              Updates and deletes are disallowed to prevent conflicts.
     * @path /usernames/{username}
     * @allow (get) Any user can read username mappings.
     * @allow (create) Authenticated user can create a username mapping with their userId.
     * @deny (update) No one can update a username mapping.
     * @deny (delete) No one can delete a username mapping.
     * @principle Public read access with restricted, self-creation only.
     */
    match /usernames/{username} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Project name mappings ensure unique project names across the platform.
     *              Only the user can create a project name mapping, and only if the userId matches their auth.uid.
     *              Updates and deletes are disallowed to prevent conflicts.
     * @path /projectNames/{projectName}
     * @allow (create) Authenticated user can create a project name mapping with their userId.
     * @deny (get) No one can get a project name mapping.
     * @deny (list) No one can list project name mappings.
     * @deny (update) No one can update a project name mapping.
     * @deny (delete) No one can delete a project name mapping.
     */
    match /projectNames/{projectName} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if false;
        allow delete: if false;
    }
  }
}