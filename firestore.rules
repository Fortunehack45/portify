/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and their associated data (projects and portfolios).
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user can read/write their own profile.
 * - /projects/{projectId}: Stores project information. Only the project owner (userId) can create, update, or delete a project. Anyone can read project information.
 * - /portfolios/{portfolioId}: Stores portfolio information. Only the portfolio owner (userId) can create, update, or delete a portfolio. Anyone can read portfolio information.
 * - /usernames/{username}: Stores a mapping between usernames and user IDs. Anyone can read this, but only authenticated users can create new entries (for themself). Deletion is disallowed.
 * - /projectNames/{projectName}: Stores a mapping between projectNames and project/user IDs. Anyone can read this, but only authenticated users can create new entries (for themself). Deletion is disallowed.
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Public read access is granted to the `/projects` and `/portfolios` collections to enable discovery.
 * - `create` operations on `/usernames` and `/projectNames` validates that `userId` matches `request.auth.uid` and `projectId`
 * Denormalization for Authorization:
 * - The `projects` collection requires a `userId` field on each document to identify the owner.
 * - The `portfolios` collection requires a `userId` field on each document to identify the owner.
 * Structural Segregation:
 * - No structural segregation is used, as public read access is allowed for `/projects` and `/portfolios` collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get, list) User with matching {userId} can read their own profile.
     * @allow (create, update, delete) User with matching {userId} can create, update and delete their own profile.
     * @deny (get, list) User trying to read another user's profile.
     * @deny (create, update, delete) User trying to modify another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to portfolio information.
     * @path /portfolios/{portfolioId}
     * @allow (get, list) Anyone can read a portfolio.
     * @allow (create) User can create a portfolio if the userId matches their auth uid.
     * @allow (update, delete) User can update/delete their own portfolio.
     * @deny (create, update, delete) User trying to modify another user's portfolio.
     * @principle Enforces document ownership for writes, public read access.
     */
    match /portfolios/{portfolioId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(resource.data.userId) && resource != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isExistingOwner(request.auth.uid) && request.resource.data.userId == resource.data.userId;
        allow delete: if isExistingOwner(request.auth.uid);
    }

    /**
     * @description Controls access to project information.
     * @path /projects/{projectId}
     * @allow (get, list) Anyone can read project information.
     * @allow (create) User can create a project if the userId matches their auth uid.
     * @allow (update, delete) User can update/delete their own project.
     * @deny (create, update, delete) User trying to modify another user's project.
     * @principle Enforces document ownership for writes, public read access.
     */
    match /projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(resource.data.userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(request.auth.uid) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(request.auth.uid);
    }

    /**
     * @description Controls access to username mappings.
     * @path /usernames/{username}
     * @allow (get, list) Anyone can read username mappings.
     * @allow (create) Authenticated user can create a username mapping for themself.
     * @deny (update, delete) No updates or deletes allowed.
     * @principle Prevents username squatting and ensures user ownership.
     */
    match /usernames/{username} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to project name mappings.
     * @path /projectNames/{projectName}
     * @allow (get, list) Anyone can read project name mappings.
     * @allow (create) Authenticated user can create a project name mapping for themself.
     * @deny (update, delete) No updates or deletes allowed.
     * @principle Ensures project name uniqueness and user ownership.
     */
    match /projectNames/{projectName} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if false;
        allow delete: if false;
    }
  }
}