/**
 * @fileoverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and their associated data (projects, portfolios).
 * Public read access is granted to projects and usernames, but writes are restricted to owners and must maintain data consistency.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /portfolios/{portfolioId}: Stores portfolio information.
 * - /projects/{projectId}: Stores project information.
 * - /usernames/{username}: Maps usernames to user IDs for public profile lookups.
 * - /projectNames/{projectName}: Maps project names to user and project IDs for uniqueness.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Public read access is allowed for projects and usernames to enable discovery.
 * - Project and portfolio creation, updates, and deletions are restricted to the owning user.
 * - Username creation is allowed during user creation, with restrictions to avoid conflicts.
 * - Username updates are disallowed to maintain consistency.
 * - Listing of users is disallowed.
 *
 * Denormalization for Authorization:
 * - The `Project` entity includes a `userId` field to simplify ownership checks for projects.
 * - The `Portfolio` entity includes a `userId` field to simplify ownership checks for portfolios.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Stores user profile information.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - A user can get, update, or delete their own profile.
     * @deny (create) - A user cannot create a profile with a userId that doesn't match their auth.uid.
     * @deny (list) - Users cannot list all user profiles.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Disallow listing of users.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of userId.
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Stores portfolio information.
      * @path /portfolios/{portfolioId}
      * @allow (create) - A user can create a portfolio if the userId matches their auth.uid.
      * @allow (get) - Any user can get a portfolio.
      * @allow (update, delete) - A user can update or delete their own portfolio.
      * @deny (create) - A user cannot create a portfolio with a userId that doesn't match their auth.uid.
      * @deny (list) - Users cannot list all portfolios.
      * @principle Enforces document ownership for writes, public read for get.
      */
     match /portfolios/{portfolioId} {
        allow get: if true;
        allow list: if false;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isExistingOwner(resource.data.userId);
        allow delete: if isExistingOwner(resource.data.userId);
     }

    /**
     * @description Stores project information for all users.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user can read project information.
     * @allow (create, update, delete) - Only the owner (specified by userId) can modify project information.
     * @deny (create) - A user cannot create a project with a userId that doesn't match their auth.uid.
     * @principle Public read with owner-only writes.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Maps usernames to user IDs for public profile lookups.
     * @path /usernames/{username}
     * @allow (get, list) - Any user can read username mappings.
     * @allow (create) - Allowed during user creation, if the userId matches the authenticated user's ID.
     * @deny (update, delete) - Username updates and deletes are disallowed.
     * @principle Public read, owner-only create, no updates or deletes.
     */
    match /usernames/{username} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Ensures project names (slugs) are unique across the platform.
     * @path /projectNames/{projectName}
     * @allow (create) - Only the owner of the project can create a project name mapping.
     * @allow (get) - Any user can read project name mappings.
     * @deny (list) - Listing is not allowed.
     * @deny (update, delete) - Project name mappings cannot be updated or deleted.
     * @principle Owner-only create, public read, no updates or deletes.
     */
    match /projectNames/{projectName} {
        allow get: if true;
        allow list: if false;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if false;
        allow delete: if false;
    }
  }
}