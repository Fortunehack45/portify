/**
 * @fileoverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and their associated portfolios and projects.
 * Public read access is granted to project and username information, but write access is restricted to authorized users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information; write access is restricted to the owning user.
 * - /portfolios/{portfolioId}: Stores portfolio information; write access is restricted to the owning user.
 * - /projects/{projectId}: Stores project information; write access is restricted to the owning user.
 * - /usernames/{username}: Maps usernames to user IDs; write access is denied to all.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Ownership is enforced using the `userId` field on projects and portfolios, and the document ID for user profiles.
 * - The /usernames collection is read-only, as it is only meant for public lookups.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the existing owner of the resource.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Stores user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile at /users/user123.
     * @allow (get) User with ID 'user123' reads their profile at /users/user123.
     * @allow (update) User with ID 'user123' updates their profile at /users/user123.
     * @allow (delete) User with ID 'user123' deletes their profile at /users/user123.
     * @deny (create) User with ID 'user456' attempts to create a profile at /users/user123.
     * @deny (update) User with ID 'user456' attempts to update the profile at /users/user123.
     * @deny (delete) User with ID 'user456' attempts to delete the profile at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores portfolio information.
     * @path /portfolios/{portfolioId}
     * @allow (create) User with ID 'user123' creates a portfolio at /portfolios/portfolio123 with userId: 'user123'.
     * @allow (get) Any user can get a portfolio.
     * @allow (list) User with ID 'user123' lists their portfolios.
     * @allow (update) User with ID 'user123' updates their portfolio at /portfolios/portfolio123 with userId: 'user123'.
     * @allow (delete) User with ID 'user123' deletes their portfolio at /portfolios/portfolio123 with userId: 'user123'.
     * @deny (create) User with ID 'user456' attempts to create a portfolio at /portfolios/portfolio123 with userId: 'user123'.
     * @deny (update) User with ID 'user456' attempts to update the portfolio at /portfolios/portfolio123 with userId: 'user123'.
     * @deny (delete) User with ID 'user456' attempts to delete the portfolio at /portfolios/portfolio123 with userId: 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /portfolios/{portfolioId} {
      allow get: if true;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Stores project information for all users.
     * @path /projects/{projectId}
     * @allow (create) User with ID 'user123' creates a project at /projects/project123 with userId: 'user123'.
     * @allow (get) Any user can get a project.
     * @allow (list) Any user can list projects.
     * @allow (update) User with ID 'user123' updates their project at /projects/project123 with userId: 'user123'.
     * @allow (delete) User with ID 'user123' deletes their project at /projects/project123 with userId: 'user123'.
     * @deny (create) User with ID 'user456' attempts to create a project at /projects/project123 with userId: 'user123'.
     * @deny (update) User with ID 'user456' attempts to update the project at /projects/project123 with userId: 'user123'.
     * @deny (delete) User with ID 'user456' attempts to delete the project at /projects/project123 with userId: 'user123'.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Maps usernames to user IDs for public profile lookups.
     * @path /usernames/{username}
     * @allow (get) Any user can get a username.
     * @allow (list) Any user can list usernames.
     * @deny (create) No user can create a username.
     * @deny (update) No user can update a username.
     * @deny (delete) No user can delete a username.
     * @principle Public read access, no write access.
     */
    match /usernames/{username} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

       /**
        * @description Ensures project names (slugs) are unique across the platform.
        * @path /projectNames/{projectName}
        * @allow (get) Any user can get a project name.
        * @allow (list) Any user can list project names.
        * @deny (create) No user can create a project name.
        * @deny (update) No user can update a project name.
        * @deny (delete) No user can delete a project name.
        * @principle Ensures that project names are publicly readable but not writable directly.
        */
       match /projectNames/{projectName} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
       }
  }
}