/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles
 * and allows public read access to projects while restricting
 * write access to the owner of each project.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the
 *   authenticated user can read and write their own profile data.
 * - /projects/{projectId}: Stores project information. Anyone can
 *   read project data, but only the project's owner (specified by
 *   the userId field) can create, update, or delete it.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Project data is publicly readable to showcase user portfolios.
 * - Listing of users is explicitly denied to prevent data scraping.
 *
 * Denormalization for Authorization:
 * - Projects contain a `userId` field to easily determine the owner
 *   for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data. Only the authenticated user can
     *              read, create, update, or delete their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with matching userId.
     *        Example: User 'user123' can read/write data at /users/user123.
     * @deny (get, create, update, delete) User accessing a different userId.
     *        Example: User 'user456' cannot read/write data at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages project data. Allows public read access while
     *              restricting create, update, and delete operations to the
     *              project owner.
     * @path /projects/{projectId}
     * @allow (get, list) Any user can read any project.
     *        Example: Any user can read project data at /projects/project123.
     * @allow (create) Project creator if userId in the request matches auth.uid.
     *        Example: User 'user123' can create a project with userId 'user123'.
     * @allow (update, delete) Project owner can modify/delete their projects.
     *        Example: User 'user123' can update/delete project at
     *                 /projects/project123 if it has userId 'user123'.
     * @deny (create) Project creator if userId does not match auth.uid.
     *        Example: User 'user123' cannot create a project with userId
     *                 'user456'.
     * @deny (update, delete) Non-owner attempting to modify/delete a project.
     *        Example: User 'user456' cannot update/delete project at
     *                 /projects/project123 if it has userId 'user123'.
     * @principle Public read with owner-only writes, validates owner on create.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isProjectOwner(projectId, request.auth.uid);
      allow delete: if isSignedIn() && isProjectOwner(projectId, request.auth.uid);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isProjectOwner(projectId, userId) {
        return resource != null && resource.data.userId == userId;
    }
  }
}