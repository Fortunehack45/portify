/**
 * @fileoverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and their associated portfolios and projects.
 * Public read access is granted to projects and usernames to facilitate discovery, but writes are restricted to owners.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information; write access is limited to the owning user.
 * - /portfolios/{portfolioId}: Stores portfolio data; write access is limited to the owning user.
 * - /projects/{projectId}: Stores project information; write access is limited to the owning user.
 * - /usernames/{username}: Maps usernames to user IDs; write access is limited to ensure integrity.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Projects are publicly readable to allow for discovery, but only the owner can modify them.
 * - Username mappings are publicly readable but only writeable under strict conditions to prevent spoofing.
 * - Listing of users is not allowed.
 *
 * Denormalization for Authorization:
 * - The `Project` entity includes a `userId` field to quickly determine the project's owner without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their profile.
     * @allow (get, update, delete) User with matching ID can access their profile.
     * @deny (create) User cannot create a profile with an ID that doesn't match their own.
     * @deny (get, update, delete) User cannot access another user's profile.
     * @deny (list) Listing all users is not permitted.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the requesting user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Allow a user to create their own profile if the userId matches their auth.uid.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Allow a user to get, update, and delete their own profile.
      allow get: if isSignedIn() && isOwner(userId) && resource != null;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && resource.data.id == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);

      // Prevent listing all users.
      allow list: if false;

      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }
    }

      /**
       * @description Controls access to portfolio documents.
       * @path /portfolios/{portfolioId}
       * @allow (create) User with matching ID can create a portfolio
       * @allow (get, update, delete) User with matching ID can access their portfolio
       * @deny (create) User cannot create a portfolio with an ID that doesn't match their own
       * @deny (get, update, delete) User cannot access another user's portfolio
       * @deny (list) Listing all portfolios is not permitted
       * @principle Enforces document ownership for portfolios
       */
    match /portfolios/{portfolioId} {
        // Helper function to check if the requesting user is the owner of the portfolio.
        function isPortfolioOwner(portfolioId) {
            return get(/databases/$(database)/documents/portfolios/$(portfolioId)).data.userId == request.auth.uid;
        }

        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow get: if isSignedIn() && isPortfolioOwner(portfolioId) && resource != null;
        allow update: if isSignedIn() && isPortfolioOwner(portfolioId) && resource != null;
        allow delete: if isSignedIn() && isExistingPortfolioOwner(portfolioId);
        allow list: if false;

        function isExistingPortfolioOwner(portfolioId) {
            return isSignedIn() && isPortfolioOwner(portfolioId) && resource != null;
        }
    }

    /**
     * @description Controls access to project documents.
     * @path /projects/{projectId}
     * @allow (get, list) All users can read project information.
     * @allow (create) Only the owner (matching userId) can create a project.
     * @allow (update, delete) Only the owner can modify or delete a project.
     * @deny (create) User cannot create a project with an ID that doesn't match their own.
     * @principle Public read access with owner-only writes, enforcing document ownership.
     */
    match /projects/{projectId} {
      // Helper function to check if the requesting user is the owner of the project.
      function isProjectOwner(projectId) {
          return get(/databases/$(database)/documents/projects/$(projectId)).data.userId == request.auth.uid;
      }

      // Allow anyone to read project information.
      allow get, list: if true;

      // Allow a user to create a project if they are signed in.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

      // Only the project owner can update or delete the project.
      allow update: if isSignedIn() && isProjectOwner(projectId) && resource != null;
      allow delete: if isSignedIn() && isExistingProjectOwner(projectId);

      function isExistingProjectOwner(projectId) {
          return isSignedIn() && isProjectOwner(projectId) && resource != null;
      }
    }

    /**
     * @description Controls access to username mapping documents.
     * @path /usernames/{username}
     * @allow (get, list) All users can read username mappings for lookups.
     * @allow (create) Only allow if the user is signed in
     * @allow (update,delete) no one can update or delete a username
     * @deny (create) Ensure the username isn't spoofed.
     * @principle Public read access for username lookups, restricted writes to prevent spoofing.
     */
    match /usernames/{username} {
      // Allow anyone to read username mappings.
      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

      allow update: if false;
      allow delete: if false;
    }

    // Helper function to check if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}