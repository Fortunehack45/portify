/**
 * @fileoverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and their associated data (portfolios, projects).
 * Public read access is granted to project and portfolio data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user.
 * - /portfolios/{portfolioId}: Stores portfolio data, publicly readable, but writable only by the owner.
 * - /projects/{projectId}: Stores project data, publicly readable, but writable only by the owner.
 * - /usernames/{username}: Maps usernames to user IDs for public lookup.
 * - /projectNames/{projectName}: Maps project names to project and user IDs for ensuring uniqueness.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Project and portfolio data is publicly readable but only the owner can modify/delete.
 * - Username mappings can be created, but not updated or deleted, and only if the user ID matches the authenticated user.
 * - ProjectName mappings can be created, but not updated or deleted, and only if the user ID matches the authenticated user.
 * - Listing of user documents is explicitly denied.
 *
 * Denormalization for Authorization:
 * - Projects and Portfolios contain a `userId` field to identify the owner. This allows for efficient owner-based security rules without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Users can only read and write their own profile data.
     * @path /users/{userId}
     * @allow (read, write) if the user is the owner of the profile.
     * @deny (read, write) if the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure Portfolios. Publicly readable, owner-only writes.
     * @path /portfolios/{portfolioId}
     * @allow (get, list) Public access for reading portfolio data.
     * @allow (create) If the user ID in the request matches the authenticated user ID.
     * @allow (update, delete) If the user is the owner of the portfolio.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Public read, owner-only writes.
     */
    match /portfolios/{portfolioId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(resource.data.userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(request.auth.uid);
      allow delete: if isExistingOwner(request.auth.uid);
    }

    /**
     * @description Secure Projects. Publicly readable, owner-only writes.
     * @path /projects/{projectId}
     * @allow (get, list) Public access for reading project data.
     * @allow (create) If the user ID in the request matches the authenticated user ID.
     * @allow (update, delete) If the user is the owner of the project.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Public read, owner-only writes.
     */
    match /projects/{projectId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(resource.data.userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(request.auth.uid);
      allow delete: if isExistingOwner(request.auth.uid);
    }

    /**
     * @description Secure usernames.  Anyone can read, but creation is restricted to the user matching the requested userId. Updates and Deletes are not allowed.
     * @path /usernames/{username}
     * @allow (get, list) Public access for reading username data.
     * @allow (create) If the userId in the request matches the authenticated user ID.
     * @deny (update, delete) Always deny updates and deletes.
     * @principle Public read, owner-only creation.
     */
    match /usernames/{username} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

       /**
        * @description Secure project names.  Anyone can read, but creation is restricted to the user matching the requested userId. Updates and Deletes are not allowed.
        * @path /projectNames/{projectName}
        * @allow (get, list) Public access for reading project name data.
        * @allow (create) If the userId in the request matches the authenticated user ID.
        * @deny (update, delete) Always deny updates and deletes.
        * @principle Public read, owner-only creation.
        */
    match /projectNames/{projectName} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }
  }
}