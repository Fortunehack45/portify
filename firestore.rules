/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and allows public read access to projects, with owner-only write access.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the owning user.
 * - /projects/{projectId}: Stores project data. Read access is public, but write access is limited to the project owner (identified by the userId field).
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data. User listing is disallowed to protect privacy.
 * - Projects are publicly readable, allowing anyone to browse the project showcase.
 * - Only the project owner can create, update, or delete a project.
 * - No schema validation is performed in this prototyping phase to allow for rapid iteration.
 *
 * Denormalization for Authorization:
 * - The /projects/{projectId} documents require a `userId` field to identify the project owner. This denormalization is essential for enforcing owner-only write access without additional `get()` calls.
 *
 * Structural Segregation:
 * - User profiles are stored in a dedicated /users/{userId} collection, ensuring private user data is kept separate from public project data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) Authenticated user can read/update/delete their own profile.
     * @deny (create) Creating a user profile with an ID that doesn't match the authenticated user's ID.
     * @deny (list) Listing all users is not permitted.
     * @deny (get, update, delete) Any other user trying to read/update/delete this profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to projects.
     * @path /projects/{projectId}
     * @allow (get, list) Anyone can read or list projects.
     * @allow (create) Authenticated user can create a project if they are the owner.
     * @allow (update, delete) Only the project owner can update or delete a project.
     * @deny (create) Creating a project with an owner ID that doesn't match the authenticated user's ID.
     * @deny (update, delete) Any other user trying to update/delete this project.
     * @principle Allows public read access but enforces owner-only writes for projects.
     */
    match /projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(resource.data.userId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}