/**
 * @fileoverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and their associated data (portfolios, projects).
 * Public read access is granted to certain collections to allow for profile discovery and sharing, while write access remains restricted to owners.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.  The 'id' field within the document must match the 'userId' in the path.
 * - /portfolios/{portfolioId}: Stores portfolio data.  The 'userId' field within the document indicates the owner.
 * - /projects/{projectId}: Stores project data. The 'userId' field within the document indicates the owner.
 * - /usernames/{username}: Maps usernames to user IDs. This collection is publicly readable but only writeable under specific conditions (see below).
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Public read access is granted to the /projects and /usernames collections.
 * - Default security posture for ambiguous relationships is owner-only access.
 *
 * Denormalization for Authorization:
 * - Portfolio documents contain a `userId` field to enable owner-based access control.
 * - Project documents also contain a `userId` field to simplify authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Root-level helper function to check if a user is signed in.
     * @principle Requires authentication for all protected resources.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Helper function to check if the request is made by the owner of the resource.
     * @principle Enforces user-ownership for data access.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {bool} - True if the user ID matches the request's auth UID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Helper function to check if the request is made by the existing owner of the resource.
     * It first checks for the document's existence, then confirms ownership.
     * @principle Enforces user-ownership and document existence before destructive operations.
     * @param {string} userId - The user ID to compare against the request's auth UID and the resource's owner ID.
     * @return {bool} - True if the user ID matches the request's auth UID and the user owns the document, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && resource != null && request.auth.uid == userId;
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, update, delete) - Only the authenticated user who owns the profile can get, update, or delete it.
     * @deny (list) - Prevents listing all users.
     * @deny (create) - Prevents an unauthenticated user from creating a profile.
     * @deny (update, delete) - Prevents an unauthenticated user from updating or deleting a profile.
     * @deny (create) - Prevents a user from creating a profile with an ID that doesn't match their own.
     * @deny (update) - Prevents a user from changing their user ID after creation.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for portfolio documents.
     * @path /portfolios/{portfolioId}
     * @allow (create) - Authenticated user can create a portfolio if the userId matches their auth UID.
     * @allow (get, update, delete) - Only the authenticated user who owns the portfolio can get, update, or delete it.
     * @deny (list) - Prevents listing all portfolios (must be accessed via user).
     * @deny (create) - Prevents an unauthenticated user from creating a portfolio.
     * @deny (update, delete) - Prevents an unauthenticated user from updating or deleting a portfolio.
     * @principle Enforces document ownership for writes.
     */
    match /portfolios/{portfolioId} {
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Rules for project documents.
     * @path /projects/{projectId}
     * @allow (create) - Authenticated user can create a project if the userId matches their auth UID.
     * @allow (get, list, update, delete) - Only the authenticated user who owns the project can get, update, or delete it.
     * @deny (create) - Prevents an unauthenticated user from creating a project.
     * @deny (update, delete) - Prevents an unauthenticated user from updating or deleting a project.
     * @principle Enforces document ownership for writes.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Rules for username documents.
     * @path /usernames/{username}
     * @allow (get, list) - Allows anyone to read usernames.
     * @deny (create, update, delete) - Only the function that owns the write processes can make changes
     * @principle Public read access for username lookups.
     */
    match /usernames/{username} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}