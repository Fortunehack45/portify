/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and their associated data,
 *              while also allowing public read access to projects. Username mappings are publicly readable.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /portfolios/{portfolioId}: Stores portfolio data, accessible only to the user themselves.
 * - /projects/{projectId}: Stores project data, publicly readable, but writable only by the project owner.
 * - /usernames/{username}: Stores username-to-userId mappings, publicly readable, writable only by the user themselves.
 * - /projectNames/{projectName}: Stores projectName-to-projectId mappings, accessible only to the user themselves.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Projects are publicly readable but only the owner can create, update, or delete them.
 * - Username mappings are publicly readable but only the user can create them, and project name mappings are accessible only to the user themselves.
 * - Listing of users and project names is disallowed.
 *
 * Denormalization for Authorization:
 * - Projects have a `userId` field that is used to enforce ownership. This avoids needing to query a separate
 *   collection to determine project ownership.
 * - The `usernames` collection entries map a username to a userId which allows us to find the correct user based on a username.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (read, write) if request.auth.uid == userId
     * @deny (read, write) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requesting user owns the resource.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Check if the user is an existing owner of the resource.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to portfolio information.
     * @path /portfolios/{portfolioId}
     * @allow (read, write) if request.auth.uid == resource.data.userId
     * @deny (read, write) if request.auth.uid != resource.data.userId
     * @principle Enforces document ownership for all operations.
     */
    match /portfolios/{portfolioId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requesting user owns the resource.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isPortfolioOwner(portfolio) {
        return portfolio.userId == request.auth.uid;
      }

      // Check if the user is an existing owner of the resource.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isPortfolioOwner(resource.data);
      allow list: if false;
      allow create: if isOwner(request.resource.data.userId) && request.resource.data.id == portfolioId;
      allow update: if isPortfolioOwner(resource.data) && request.resource.data.id == resource.data.id;
      allow delete: if isPortfolioOwner(resource.data);
    }

    /**
     * @description Controls access to project information.
     * @path /projects/{projectId}
     * @allow (read) to anyone
     * @allow (write) only to the owner of the project
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /projects/{projectId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requesting user owns the resource.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Check if the user is an existing owner of the resource.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.id == projectId;
      allow update: if isExistingOwner(resource.data.userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to username mappings.
     * @path /usernames/{username}
     * @allow (read) to anyone
     * @allow (write) only to the user that owns the username
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /usernames/{username} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requesting user owns the resource.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Check if the user is an existing owner of the resource.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to project name mappings.
     * @path /projectNames/{projectName}
     * @allow (read, write) only to the user that owns the project name
     * @deny (read, write) if request.auth.uid != resource.data.userId
     * @principle Enforces document ownership for all operations.
     */
    match /projectNames/{projectName} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the requesting user owns the resource.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isProjectNameOwner(projectName) {
        return projectName.userId == request.auth.uid;
      }

      // Check if the user is an existing owner of the resource.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isProjectNameOwner(resource.data);
      allow list: if false;
      allow create: if isOwner(request.resource.data.userId) && request.resource.data.projectId != null;
      allow update: if isProjectNameOwner(resource.data) && request.resource.data.projectId == resource.data.projectId;
      allow delete: if isProjectNameOwner(resource.data);
    }
  }
}