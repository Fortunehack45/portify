/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and their associated data (portfolios and projects).
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the authenticated user can read/write their own profile.
 * - /portfolios/{portfolioId}: Stores portfolio information.  Portfolios are publicly readable but only the owner can modify or delete.
 * - /projects/{projectId}: Stores project information. Projects are publicly readable but only the owner can modify or delete.
 * - /usernames/{username}: Maps usernames to user IDs. This is publicly readable, but creation is restricted to ensure integrity.
 * Key Security Decisions:
 * - No user listing: Listing all users is disallowed for privacy reasons.
 * - Public read for projects/portfolios: These top-level collections are readable by everyone but writable only by the owner.
 * - Username creation: Only allow creation, never update or delete, and only if the userId matches the authenticated user.
 * Denormalization for Authorization:
 * - Projects and portfolios require a `userId` field to enable ownership checks.
 * Structural Segregation:
 * - Publicly accessible data (projects, portfolios) is stored in top-level collections with owner-only write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) - Authenticated user can access their own profile.
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @deny (get, update, delete) - Any user trying to access another user's profile.
     * @deny (create) - Any user trying to create a profile with a userId that doesn't match their auth UID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Verify identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Check user ownership
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Check existing user ownership (for updates/deletes)
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure portfolios. Publicly readable, but only the owner can modify or delete.
     * @path /portfolios/{portfolioId}
     * @allow (get, list) - Any user can read any portfolio.
     * @allow (create) - Authenticated user can create a portfolio if the userId matches their auth UID.
     * @allow (update, delete) - Only the portfolio owner can update or delete it.
     * @deny (create) - Any user trying to create a portfolio with a userId that doesn't match their auth UID.
     * @deny (update, delete) - Any user trying to update or delete a portfolio they don't own.
     * @principle Public read with owner-only writes.
     */
    match /portfolios/{portfolioId} {
      // Verify identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Check user ownership
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Check existing user ownership (for updates/deletes)
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Secure projects. Publicly readable, but only the owner can modify or delete.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user can read any project.
     * @allow (create) - Authenticated user can create a project if the userId matches their auth UID.
     * @allow (update, delete) - Only the project owner can update or delete it.
     * @deny (create) - Any user trying to create a project with a userId that doesn't match their auth UID.
     * @deny (update, delete) - Any user trying to update or delete a project they don't own.
     * @principle Public read with owner-only writes.
     */
    match /projects/{projectId} {
      // Verify identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Check user ownership
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Check existing user ownership (for updates/deletes)
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Secure usernames. Publicly readable, but creation is restricted.
     * @path /usernames/{username}
     * @allow (get, list) - Any user can read any username.
     * @allow (create) - Authenticated user can create a username if the userId matches their auth UID.
     * @deny (update, delete) - No updates or deletes allowed.
     * @principle Public read with owner-only writes, but only on create.
     */
    match /usernames/{username} {
      // Verify identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Check user ownership
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }
}