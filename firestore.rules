/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a strict user-ownership model for user profiles and a public read, owner-write model for projects.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profile documents, accessible only to the owning user.
 * - /projects/{projectId}: Stores project documents, publicly readable but writable only by the project creator. Each project document must contain a `userId` field indicating ownership.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Project listing is public, but project creation, updates, and deletion are restricted to the project owner.
 * - Data consistency is enforced by validating the `userId` field on project creation.
 *
 * Denormalization for Authorization:
 * - The `projects` collection requires a `userId` field on each project document to enforce owner-only write access.
 *
 * Structural Segregation:
 * - Public data (projects) is stored in a top-level collection (`/projects/{projectId}`), while private user data is stored under `/users/{userId}`, ensuring clear separation and efficient querying.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile at /users/user_abc.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, update, and delete their profile at /users/user_abc.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, update, or delete the profile at /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to project documents. Allows public read access but restricts write access to the project owner.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user can read any project document.
     * @allow (create) - User with UID 'user_abc' can create a project document where project.userId == 'user_abc'.
     * @allow (update, delete) - User with UID 'user_abc' can update/delete a project document where project.userId == 'user_abc'.
     * @deny (create) - User with UID 'user_xyz' cannot create a project document where project.userId != 'user_xyz'.
     * @deny (update, delete) - User with UID 'user_xyz' cannot update/delete a project document where project.userId == 'user_abc'.
     * @principle Allows public read access but enforces owner-only write access based on the `userId` field in the document.
     */
    match /projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}