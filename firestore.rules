/**
 * @fileoverview Firestore Security Rules for Portfolio App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access to project data while restricting modifications to the owner.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Only the user can read/write their own profile.
 * - /projects/{projectId}: Stores project data.  Anyone can read, but only the project owner can modify.
 *
 * Key Security Decisions:
 * - Users cannot list all user profiles (to protect privacy).  Only `get` is allowed for individual profiles.
 * - Projects are publicly readable but owner-writeable. The 'Project' schema MUST contain a `userId` field for owner validation.
 *
 * Denormalization for Authorization:
 * - Project documents must include a `userId` field to identify the owner. This is essential for secure write rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (update) Authenticated user can update their own profile if the userId matches their auth.uid and the document exists.
     * @allow (delete) Authenticated user can delete their own profile if the userId matches their auth.uid and the document exists.
     * @deny (list) Prevent listing all users.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to project documents.
     * @path /projects/{projectId}
     * @allow (get) Anyone can read a project.
     * @allow (list) Anyone can list projects.
     * @allow (create) Authenticated user can create a project if the userId matches their auth.uid.
     * @allow (update) Authenticated user can update a project if the userId matches the project's userId.
     * @allow (delete) Authenticated user can delete a project if the userId matches the project's userId.
     * @principle Allows public read access but restricts writes to the owner.
     */
    match /projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isProjectOwner(userId) {
        return isSignedIn() && isOwner(userId);
      }

      function isExistingProjectOwner(userId) {
        return isSignedIn() && resource != null && isOwner(resource.data.userId);
      }


      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingProjectOwner(request.auth.uid) ;
      allow delete: if isExistingProjectOwner(request.auth.uid);
    }
  }
}