/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and associated data.
 * Public read access is granted to some collections (e.g., `projects`), while write access is restricted to authorized users.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information, accessible only by the user themselves.
 * - `/portfolios/{portfolioId}`: Stores portfolio information.
 * - `/projects/{projectId}`: Stores project information, publicly readable but writable only by the project owner.
 * - `/usernames/{username}`: Maps usernames to user IDs for public profile lookups; write access is denied.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the authenticated user.
 * - Projects are publicly readable to showcase user work, but creating, updating, or deleting them requires ownership.
 * - Usernames can be looked up publicly but cannot be created, updated, or deleted directly via Firestore; this should be handled via a trusted backend.
 * - Listing of users is disallowed.
 *
 * Denormalization for Authorization:
 * The `Project` entity requires a `userId` field to enforce ownership. This avoids the need for complex queries or additional reads to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile data, allowing only the authenticated user to read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' creates their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get, update, delete) - User with ID 'user123' reads their profile.
     *   - request.auth.uid: 'user123'
     * @deny (create) - User with ID 'user456' attempts to create a profile for 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.id: 'user123'
     * @deny (get, update, delete) - User with ID 'user456' attempts to read user123 profile.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures portfolios.
     * @path /portfolios/{portfolioId}
     * @allow (create) - User with ID 'user123' creates a portfolio.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user123'
     * @allow (get, update, delete) - User with ID 'user123' reads their portfolio.
     *   - request.auth.uid: 'user123'
     * @deny (create) - User with ID 'user456' attempts to create a portfolio for 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.userId: 'user123'
     * @deny (get, update, delete) - User with ID 'user456' attempts to read user123 portfolio.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /portfolios/{portfolioId} {
        allow get: if true; // Public read access
        allow list: if true;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Secures project data, allowing public read access but restricting write access to the project owner.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user can read project data.
     * @allow (create) - User with ID 'user123' creates a project with ownerId 'user123'.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user123'
     * @allow (update, delete) - User with ID 'user123' updates/deletes a project they own (resource.data.userId == 'user123').
     *   - request.auth.uid: 'user123'
     * @deny (create) - User with ID 'user456' attempts to create a project with ownerId 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.userId: 'user123'
     * @deny (update, delete) - User with ID 'user456' attempts to update/delete a project owned by 'user123'.
     *   - request.auth.uid: 'user456'
     * @principle Public read, owner-only writes, enforces document ownership for writes.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Secures the username mapping, preventing direct client-side writes.
     * @path /usernames/{username}
     * @allow (get) - Any user can read the username mapping.
     * @deny (create, update, delete) - No user can create, update, or delete username mappings directly.
     * @principle Restricts write access to a trusted backend.
     */
    match /usernames/{username} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}