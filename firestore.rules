/**
 * @fileoverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection and access control.
 * Users can only read and modify their own profiles and projects.
 * Public read access is granted for 'users' and 'projects' collections.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /projects/{projectId}: Stores project data, with a 'userId' field indicating ownership.
 * - /usernames/{username}: Maps usernames to user IDs for lookup.
 *
 * Key Security Decisions:
 * - Public read access is granted to the 'users' and 'projects' collections to display user portfolios and project listings.
 * - User profiles and projects can only be created, updated, or deleted by their respective owners.
 * - Username lookups are public.
 *
 * Denormalization for Authorization:
 * - The 'projects' collection stores a 'userId' field to indicate ownership, enabling direct access control without additional queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (get, list): Any user can read any user profile.
     * @allow (create): Only the user with matching {userId} can create their profile.
     * @allow (update, delete): Only the user with matching {userId} can update/delete their profile.
     * @deny (create): If the user ID in the request doesn't match the authenticated user's ID.
     * @deny (update, delete): If a different user tries to modify or delete this profile.
     * @principle Enforces document ownership for writes; allows public reads.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to projects.
     * @path /projects/{projectId}
     * @allow (get, list): Any user can read any project.
     * @allow (create): Only the user with matching userId can create a project.
     * @allow (update, delete): Only the user with matching userId can update/delete their project.
     * @deny (create): If the user ID in the request doesn't match the authenticated user's ID.
     * @deny (update, delete): If a different user tries to modify or delete this project.
     * @principle Enforces document ownership for writes; allows public reads.
     */
    match /projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isProjectOwner(userId) {
        return resource.data.userId == request.auth.uid;
      }

      function isExistingProjectOwner(userId) {
        return isProjectOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingProjectOwner(request.auth.uid);
      allow delete: if isExistingProjectOwner(request.auth.uid);
    }

     /**
      * @description Controls access to usernames.
      * @path /usernames/{username}
      * @allow (get, list): Any user can read any username mapping.
      * @allow (create): Only a signed-in user can create a username mapping.
      * @allow (update, delete): No updates or deletes allowed.
      * @deny (create): If not signed in.
      * @deny (update, delete): Always deny updates and deletes.
      * @principle Allows public reads, restricts writes.
      */
    match /usernames/{username} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}