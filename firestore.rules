/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @Core Philosophy
 * This ruleset enforces a user-ownership model for user profiles and a public-read, owner-write model for portfolios and projects.
 * Usernames are publicly readable but only writable by authorized functions.
 *
 * @Data Structure
 * - /users/{userId}: User profile information, accessible only by the user.
 * - /portfolios/{portfolioId}: Portfolio information, publicly readable, writable only by the owner.
 * - /projects/{projectId}: Project information, publicly readable, writable only by the owner.
 * - /usernames/{username}: Maps usernames to user IDs, only writable by authorized functions.
 *
 * @Key Security Decisions
 * - User listing is disallowed for privacy.
 * - Public read access is granted to /portfolios and /projects to allow open discovery.
 * - Ownership is enforced using the `userId` field on documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the resource user ID and that the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    match /users/{userId} {
      /**
       * @description Controls access to user profile documents.
       * @path /users/{userId}
       * @allow (create) - User with UID 'user123' can create their profile if request.auth.uid == 'user123' and the document contains 'id' field equal to the user id.
       * @allow (get, list, update, delete) - User with UID 'user123' can read, update, and delete their profile if request.auth.uid == 'user123'.
       * @deny (create) - User with UID 'user456' cannot create a profile with ID 'user123'.
       * @deny (get, list, update, delete) - User with UID 'user456' cannot read, update, or delete the profile with ID 'user123'.
       * @principle Enforces strict user ownership for profile data.
       */
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed for privacy.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    match /portfolios/{portfolioId} {
      /**
       * @description Controls access to portfolio documents.
       * @path /portfolios/{portfolioId}
       * @allow (get, list) - Any user (signed in or not) can read portfolio data.
       * @allow (create) - User with UID 'user123' can create a portfolio if request.auth.uid == 'user123' and the document contains 'userId' field equal to the user id.
       * @allow (update, delete) - User with UID 'user123' can update and delete their portfolio if request.auth.uid == 'user123' and the portfolio's 'userId' field is 'user123'.
       * @deny (create) - User with UID 'user456' cannot create a portfolio with 'userId' set to 'user123'.
       * @deny (update, delete) - User with UID 'user456' cannot update or delete a portfolio with 'userId' set to 'user123'.
       * @principle Allows public read access but restricts writes to the owner.
       */
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
    }

    match /projects/{projectId} {
      /**
       * @description Controls access to project documents.
       * @path /projects/{projectId}
       * @allow (get, list) - Any user (signed in or not) can read project data.
       * @allow (create) - User with UID 'user123' can create a project if request.auth.uid == 'user123' and the document contains 'userId' field equal to the user id.
       * @allow (update, delete) - User with UID 'user123' can update and delete their project if request.auth.uid == 'user123' and the project's 'userId' field is 'user123'.
       * @deny (create) - User with UID 'user456' cannot create a project with 'userId' set to 'user123'.
       * @deny (update, delete) - User with UID 'user456' cannot update or delete a project with 'userId' set to 'user123'.
       * @principle Allows public read access but restricts writes to the owner.
       */
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.userId == request.auth.uid;
    }

    match /usernames/{username} {
      /**
       * @description Controls access to username documents.
       * @path /usernames/{username}
       * @allow get - Any user can read the username mapping.
       * @deny create, update, delete - Only authorized functions can create, update, or delete usernames.
       * @principle Restricts username management to authorized functions.
       */
      allow get: if true;
      allow list: if false;
      allow create: if false; // Only accessible via a trusted function
      allow update: if false; // Only accessible via a trusted function
      allow delete: if false; // Only accessible via a trusted function
    }
  }
}