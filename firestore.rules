/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and a public-read, owner-write model for projects.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, accessible only to the owning user.
 * - Projects are stored under `/projects/{projectId}`, publicly readable but writable only by the project's owner.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Projects are publicly readable to showcase user portfolios.
 * - Project creation, updates, and deletion are restricted to the project's owner.
 *
 * Denormalization for Authorization:
 * - Projects contain a `userId` field to denote ownership, enabling efficient owner-based security rules without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles, ensuring only the owning user can read and write their data.
     * @path /users/{userId}
     * @allow (get, update, delete) User with ID 'user123' attempts to read/write their profile at /users/user123.
     * @allow (create) User with ID 'user123' attempts to create their profile at /users/user123.
     * @deny (get, update, delete) User with ID 'user456' attempts to read/write profile of user 'user123' at /users/user123.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure projects, allowing public reads but restricting writes to the project owner.
     * @path /projects/{projectId}
     * @allow (get, list) Any user can read project data at /projects/{projectId}.
     * @allow (create) User 'user123' creates a project at /projects/{projectId} with project.userId == 'user123'.
     * @allow (update, delete) User 'user123' updates/deletes their project at /projects/{projectId} where project.userId == 'user123'.
     * @deny (create) User 'user456' attempts to create a project at /projects/{projectId} with project.userId != 'user456'.
     * @deny (update, delete) User 'user456' attempts to updates/deletes project of user 'user123' at /projects/{projectId} where project.userId == 'user123'.
     * @principle Allows public read access while enforcing owner-only write access, with ownership validated by the `userId` field.
     */
    match /projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isProjectOwner(userId) {
        return resource.data.userId == request.auth.uid;
      }

      function isExistingProjectOwner(userId) {
          return isProjectOwner(userId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingProjectOwner(resource.data.userId);
      allow delete: if isExistingProjectOwner(resource.data.userId);
    }
  }
}