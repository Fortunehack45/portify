/**
 * @fileoverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset prioritizes public read access to portfolio content while restricting write access to authorized users.
 * The rules enforce ownership for user profiles and projects, ensuring that only the authenticated user can modify their respective data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /portfolios/{portfolioId}: Stores portfolio information.
 * - /projects/{projectId}: Stores project information.
 * - /usernames/{username}: Maps usernames to user IDs for profile lookups.
 * - /projectNames/{projectName}: Maps project names (slugs) to user/project IDs for uniqueness.
 *
 * Key Security Decisions:
 * - Public read access is granted for projects and portfolios to allow users and non-users to view content.
 * - Usernames and projectNames are publicly readable to facilitate lookups.
 * - Strict ownership is enforced for user profiles, requiring authentication and matching user IDs for write operations.
 *
 * Denormalization for Authorization:
 * - Projects and portfolios include a 'userId' field to easily determine ownership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile if the userId matches their auth.uid.
     * @allow (update) Signed-in user can update their own profile if the userId matches their auth.uid.
     * @allow (delete) Signed-in user can delete their own profile if the userId matches their auth.uid.
     * @allow (get) Anyone can get a user profile.
     * @allow (list) Anyone can list user profiles.
     * @deny (create) Cannot create a profile for another user.
     * @deny (update) Cannot update another user's profile.
     * @deny (delete) Cannot delete another user's profile.
     * @principle Enforces document ownership for writes and allows public reads.
     */
    match /users/{userId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to portfolio documents.
     * @path /portfolios/{portfolioId}
     * @allow (create) Signed-in user can create a portfolio if the userId matches their auth.uid.
     * @allow (update) Signed-in user can update their portfolio if the userId matches their auth.uid.
     * @allow (delete) Signed-in user can delete their portfolio if the userId matches their auth.uid.
     * @allow (get) Anyone can get a portfolio.
     * @allow (list) Anyone can list portfolios.
     * @deny (create) Cannot create a portfolio for another user.
     * @deny (update) Cannot update another user's portfolio.
     * @deny (delete) Cannot delete another user's portfolio.
     * @principle Allows public read access to portfolio content and enforces ownership for writes.
     */
    match /portfolios/{portfolioId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingPortfolioOwner(portfolioId);
      allow delete: if isSignedIn() && isExistingPortfolioOwner(portfolioId);
    }

    /**
     * @description Controls access to project documents.
     * @path /projects/{projectId}
     * @allow (create) Signed-in user can create a project if the userId matches their auth.uid.
     * @allow (update) Signed-in user can update their project if the userId matches their auth.uid.
     * @allow (delete) Signed-in user can delete their project if the userId matches their auth.uid.
     * @allow (get) Anyone can get a project.
     * @allow (list) Anyone can list projects.
     * @deny (create) Cannot create a project for another user.
     * @deny (update) Cannot update another user's project.
     * @deny (delete) Cannot delete another user's project.
     * @principle Allows public read access to project content and enforces ownership for writes.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingProjectOwner(projectId);
      allow delete: if isSignedIn() && isExistingProjectOwner(projectId);
    }

    /**
     * @description Controls access to username documents.
     * @path /usernames/{username}
     * @allow (get) Anyone can get a username.
     * @allow (list) Anyone can list usernames.
     * @deny create, update, delete: if true;
     * @principle Allows public read access to usernames.
     */
    match /usernames/{username} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to projectName documents.
     * @path /projectNames/{projectName}
     * @allow (get) Anyone can get a projectName.
     * @allow (list) Anyone can list projectNames.
     * @deny create, update, delete: if true;
     * @principle Allows public read access to projectNames.
     */
    match /projectNames/{projectName} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isExistingProjectOwner(projectId) {
        return isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
    }

    function isExistingPortfolioOwner(portfolioId) {
        return isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
    }
  }
}