/**
 * @fileoverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and their associated data (projects and portfolios).
 * Users can only read and write their own profile information.  Project and portfolio access follows an owner-only model.
 * Username lookups are publicly readable to facilitate profile discovery.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.
 * - /projects/{projectId}: Stores project data, with a userId field indicating ownership.
 * - /portfolios/{portfolioId}: Stores portfolio data, with a userId field indicating ownership.
 * - /usernames/{username}: Maps usernames to user IDs.
 *
 * Key Security Decisions:
 * - Users can only create their own profile document (self-creation).
 * - Users can only read, update, and delete their own profile.
 * - Projects and portfolios are user-owned; only the owner can create, read, update, or delete them.
 * - Listing of user documents is disallowed for privacy.
 * - Username documents are publicly readable but only writable by the application backend (emulated by owner-only access for prototyping).
 *
 * Denormalization for Authorization:
 * - The 'Project' and 'Portfolio' entities include a 'userId' field, denormalizing user ownership directly onto the document.
 *   This avoids costly and complex `get()` calls in the security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own profile.
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their own profile.
     * @deny (create, get, update, delete) User with ID 'user456' attempts to access user 'user123' profile.
     * @deny (list) Any user attempts to list all users.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // isOwner(userId)
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to project documents.
     * @path /projects/{projectId}
     * @allow (create) User with ID 'user123' creates a project with userId 'user123'.
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their own project.
     * @deny (create, get, update, delete) User with ID 'user456' attempts to access project owned by 'user123'.
     * @deny (create) User with ID 'user123' attempts to create a project with userId 'user456'.
     * @principle Enforces document ownership for writes; public read access.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to portfolio documents.
     * @path /portfolios/{portfolioId}
     * @allow (create) User with ID 'user123' creates a portfolio with userId 'user123'.
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their own portfolio.
     * @deny (create, get, update, delete) User with ID 'user456' attempts to access portfolio owned by 'user123'.
     * @deny (create) User with ID 'user123' attempts to create a portfolio with userId 'user456'.
     * @principle Enforces document ownership for writes; public read access.
     */
    match /portfolios/{portfolioId} {
        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isExistingOwner(resource.data.userId) && resource.data.userId == request.resource.data.userId;
        allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to username documents, allowing public reads and owner-only writes.
     * @path /usernames/{username}
     * @allow (get, list) Any user can read the username mappings.
     * @allow (create, update, delete) User with ID 'user123' can manage their own username mapping (for prototyping).
     * @deny (create, get, update, delete) User with ID 'user456' attempts to access username owned by 'user123'.
     * @principle Allows public reads for username lookups; enforces ownership for writes (prototyping).
     */
    match /usernames/{username} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(request.resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(request.resource.data.userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}