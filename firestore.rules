/**
 * @fileoverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and projects.
 * Only authenticated users can create, update, or delete their own profiles and projects.
 * Public read access is granted to projects, portfolios, and usernames.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /portfolios/{portfolioId}: Stores portfolio information.
 * - /projects/{projectId}: Stores project information for all users.
 * - /usernames/{username}: Maps usernames to user IDs.
 * - /projectNames/{projectName}: Maps project names to project and user IDs
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access to projects and usernames is enabled for discovery.
 * - Project ownership is based on the `userId` field within the project document.
 * - Users can only create their own profile document with a matching user ID.
 * - All write operations require user authentication.
 *
 * Denormalization for Authorization:
 * - Project documents contain a `userId` field to easily verify ownership.
 * - Portfolio documents contain a `userId` field to easily verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the user ID of the existing resource.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}
     * @allow (create) Signed-in user with matching userId in the document.
     * @deny (create) Signed-in user with non-matching userId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if false;
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to project information, but restricts modifications to the owner.
     * @path /projects/{projectId}
     * @allow (get, list) Any user can read project data.
     * @allow (create) Signed-in user with matching userId in the document.
     * @deny (create) Signed-in user with non-matching userId.
     * @principle Allows public reads, enforces owner-only writes with userId validation.
     */
    match /projects/{projectId} {
      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

      /**
       * @description Manages user's portfolios with owner-only access.
       * @path /portfolios/{portfolioId}
       * @allow (create) Signed-in user creates their portfolio with matching userId.
       * @allow (update, delete) Signed-in user updates/deletes their own existing portfolio.
       * @deny (create) Unsigned-in user attempts to create a portfolio.
       * @deny (update, delete) Signed-in user attempts to modify/delete another user's portfolio.
       * @principle Enforces ownership for portfolio management.
       */
    match /portfolios/{portfolioId} {
          allow get: if true;
          allow list: if true;
          allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
          allow update: if isExistingOwner(resource.data.userId);
          allow delete: if isExistingOwner(resource.data.userId);
      }

    /**
     * @description Allows public read access to username mappings for profile lookups.
     * @path /usernames/{username}
     * @allow (get, list) Any user can lookup usernames.
     * @deny (create, update, delete) No user can modify username mappings directly.
     * @principle Enables public username lookups, restricts modifications.
     */
    match /usernames/{username} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces unique project names across the platform.
     * @path /projectNames/{projectName}
     *  @allow (get, list) Any user can lookup project names.
     * @deny (create, update, delete) Project names should be managed by server-side logic (e.g., Cloud Functions).
     * @principle Ensures uniqueness and prevents naming conflicts.
     */
    match /projectNames/{projectName} {
          allow get, list: if true;
          allow create, update, delete: if false;
      }
  }
}